
esp32:
  board: esp32-c6-devkitc-1
  variant: esp32c6
  flash_size: 8MB
  framework:
    type: esp-idf
    platform_version: https://github.com/stintel/platform-espressif32#develop
    version: "5.2.2"
    sdkconfig_options:
      CONFIG_ESPTOOLPY_FLASHSIZE_8MB: y

external_components:
  - source: components/
    components: [ nrf905, zehnder ]

substitutions:
  hostname: zehnder-comfofan
  device_name: Zehnder ComfoFan
  device_id: zehnder_comfofan

esphome:
  name: ${hostname}
  comment: "Zehnder ComfoFan"
  project:
    name: "ESPHome.Zehnder"
    version: "Zehnder ComfoFan"
    
  on_boot:
    priority: -100
    then:
     - lambda: |-
         ${device_id}_ventilation->set_config(0x00000000, 0x00, 0x00, 0x00, 0x00);

esp8266:
  board: esp12e
  restore_from_flash: false

preferences:
  flash_write_interval: 1d

# SPI
spi:
  clk_pin: GPIO13   # SCK
  mosi_pin: GPIO12  # MOSI
  miso_pin: GPIO11  # MISO

# nRF905 config
nrf905:
  id: "nrf905_rf"
  cs_pin: GPIO23    # CSN, NSS
  cd_pin: GPIO22    # CD
  ce_pin: GPIO21
  pwr_pin: GPIO20
  txen_pin: GPIO19  # TXEN

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: !secret esphome_utility_bridge_api_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: HIGH
  fast_connect: true
  domain: !secret wifi_domain

  manual_ip:
    static_ip: !secret wifi_ip_utility_bridge
    gateway: !secret wifi_gateway
    subnet: !secret wifi_subnet
    dns1: !secret wifi_gateway

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${device_name} Fallback"
    password: !secret esphome_utility_bridge_ap_password

web_server:
  port: 80
  local: true
  version: 2
  auth:
    username: admin
    password: !secret web_password

captive_portal:

time:
  - platform: sntp
    timezone: Europe/Amsterdam
    servers:
      - "pool.ntp.org"

light:
  - platform: status_led
    name: "${device_name} Status LED"
    id: "${device_id}_status_led"
    internal: true
    pin:
      number: GPIO2
      inverted: true

binary_sensor:
  - platform: template
    name: "${device_name} Timer"
    id: "${device_id}_timer"
    icon: mdi:fan-clock

sensor:
  - platform: wifi_signal
    name: "${device_name} RSSI"
    update_interval: 60s

  - platform: uptime
    name: "${device_name} Uptime"

  - platform: adc
    pin: VCC
    name: "${device_name} Power Supply"

  - platform: template
    name: "${device_name} Ventilation Percentage"
    id: "${device_id}_ventilation_percentage"
    state_class: measurement
    unit_of_measurement: '%'
    icon: mdi:percent
    accuracy_decimals: 0

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${device_name} IP Address"
    ssid:
      name: "${device_name} SSID"
    bssid:
      name: "${device_name} BSSID"
    mac_address:
      name: "${device_name} MAC"

  - platform: template
    name: "${device_name} Ventilation Mode"
    id: "${device_id}_ventilation_mode"
    icon: mdi:information

switch:
  - platform: safe_mode
    name: "${device_name} Restart (Safe Mode)"
  - platform: restart
    name: "${device_name} Restart"
  - platform: factory_reset
    name: "${device_name} Factory Default Settings"

button:
  - platform: template
    id: ${device_id}_auto
    name: ${device_name} Auto
    icon: mdi:fan-auto
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(0, 0);
  - platform: template
    id: ${device_id}_low
    name: ${device_name} Low
    icon: mdi:fan-speed-1
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(1, 0);
  - platform: template
    id: ${device_id}_medium
    name: ${device_name} Medium
    icon: mdi:fan-speed-2
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(2, 0);
  - platform: template
    id: ${device_id}_high
    name: ${device_name} High
    icon: mdi:fan-speed-3
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(3, 0);
  - platform: template
    id: ${device_id}_max_10
    name: ${device_name} Max 10
    icon: mdi:fast-forward-10
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(4, 10);
  - platform: template
    id: ${device_id}_max_30
    name: ${device_name} Max 30
    icon: mdi:fast-forward-30
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(4, 30);
  - platform: template
    id: ${device_id}_max_60
    name: ${device_name} Max 60
    icon: mdi:fast-forward-60
    on_press:
      then:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - lambda: |-
          ${device_id}_ventilation->setSpeed(4, 60);

# The FAN controller
fan:
  - platform: zehnder
    id: ${device_id}_ventilation
    name: "${device_name} Ventilation"
    nrf905: nrf905_rf
    update_interval: "60s"
    on_speed_set:
      - light.turn_on: "${device_id}_status_led"
      - delay: 500ms
      - light.turn_off: "${device_id}_status_led"
      - sensor.template.publish:
          id: ${device_id}_ventilation_percentage
          state: !lambda 'return ${device_id}_ventilation->voltage;'
      - binary_sensor.template.publish:
          id: ${device_id}_timer
          state: !lambda 'return ${device_id}_ventilation->timer;'
      - text_sensor.template.publish:
          id: ${device_id}_ventilation_mode
          state: !lambda 'switch (${device_id}_ventilation->speed) {
                             case 1: return "Low";
                             case 2: return "Medium";
                             case 3: return "High";
                             case 4: return "Max";
                             default: return "Auto";
                         }'



